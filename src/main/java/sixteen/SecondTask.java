package sixteen;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;

public class SecondTask {

    record Direction(int row, int col) {}

    record Position(int row, int col) {}

    public static void main(String[] args) {
        var input = """
                \\................................................................\\.-.........../.................-........-./.
                ......./........|..../......\\...................../......\\.....\\.....-|/|............................/.../....
                ....\\...........-.....-..|\\..../\\...-............./../......\\..|......\\............/...................\\\\.....
                ............................................................................-....|.........../.|............-.
                ....-..\\..........\\..........-....................../......|\\...........................-...-.................
                ..\\....../.......\\....|....................-......\\.-.........|......../.|../.................................
                .................../....../-.-.\\..........|............................../\\.../...-.|....|............../.....
                .......................\\................\\....|....|....|........\\..................../|/-.....................
                ...........\\../...|...............-...............|........-./..../-.............-.............-......../.....
                ./...-..............................-../.../..../...-....../.............|........-..............|............
                ..|...........................................-..-\\.......-......\\...........-...........-..............-.....
                ........................./.|..........-...--......./..................\\..........-.............../...//|......
                ............-|.......|.-.....\\.............................\\........../.-.............|.......................
                -...........\\.........../......|......|...|.-............/.\\.........\\.................\\.......-.-.....\\-.....
                ................/...\\....................../........................||.................../...........-..|../..
                ...|./........./................|...................../....-.........|.......|............|................/..
                ..............|.......\\..........\\..................|.\\.....-...........|..|...-.....\\../..........|....-.....
                ...\\...............\\............-........../..........\\.\\.........................|......|....................
                ............-......-.../..................-.........../........................-............/|..../......./...
                ............/....../............................|....................\\............|.........\\..-......../...-|
                .../\\............./...............\\........\\\\........|../....-...|.............................../..........-.
                ..........................................|/..............|-.|.........-.-............-.........../......-....
                -\\....|......................\\............||.............\\../..-....-.............-.../..................-....
                ......-..............|...|......./\\............|................/................||...........................
                ................||.....-...|....................\\..................\\..../.\\....\\.....|.../.............|......
                ..-.|..............\\.................................-.........../...............\\......................|.....
                .......-......|../.....................-...................................-......./......./............|..\\..
                ...\\................/..................................|...........................|...|............/.........
                ................\\.........|................|......................-...|...............-......\\..-/......-.....
                ....|..................\\......\\.|..../....................................\\...........-........|..............
                ........|...../.......................|-...-.......-.......|./......./......................|...........\\.....
                \\\\-.................|..........|.\\......|......--.......\\.....|-..\\................./............\\........\\...
                .|..../.......\\...|.|..............................\\.....................|\\..................../|...........|.
                ........\\..............|.....|..\\....-.....|....../...-.\\.....\\.........../.........-.....\\......-.-..........
                .-.......\\.....|........\\...|......./....|.\\................|....|......./.....\\/..-............|.............
                ../\\/.........../...../..-..\\....../.................--......../.........\\......./.........\\\\.................
                ./....-...-......./...-...\\-............|..............................-............-...\\......|............./
                ........./.....\\.....-.........................\\./.........................|.....|............................
                ...-....\\.............-.\\..|/........./................../..|.................|.......|................\\......
                ...|.............|.......\\...................|......./.............-...........-............/...............\\.
                ..........|..../.........|.......|.............\\....-.....|\\....|..-\\....../............|...\\...........\\.....
                ......./\\../.../|.-...........\\\\..../..........|......................./....-./.........\\.....\\..............\\
                ......\\......-................................-\\..........................\\.........................../..-....
                .............................-.......-.......-.|...|/..................-.....-.....|.|......-.....-...........
                ..-.............\\......../..../.............|............../......|......../....../...........................
                \\............|.....................................................|.............................../..........
                ...\\.................|.-.......|....|......-..........................\\.........|........................\\...|
                .|...........|......../..................-...../.\\/.............-..|.......--...-.......|...../...|...........
                .../....\\....\\......................|...............-.....|.............../.-..\\......-......|................
                .....-..-..../........-...\\.../..-........................\\...........................-.......................
                -.........................\\.................|...\\.\\...................|..........\\-......-|...-...............
                .................................................../.............-.-...................../................/.\\.
                ...-./...\\......................\\..-./.................................|...\\.......-............|.|..\\......|.
                ./....../.....././.........................\\...........-.............../.....|........................|..|.../
                ............\\........-|../..........\\-....\\................|.|................\\............../...............-
                .....|..-................|......................|................../-..................../..\\.................
                .............|.................../......|..................|.../.....................-....|...................
                ............./.........................|.........--......|.-..|................-....................|.........
                .-.....\\....|\\.../.............................................../........-......../.../..............|.......
                .......|....-...|.............|...............|....\\.|.........|......../...............|..|..................
                ...-....-...-.........--..\\.........../|..-../......\\/.......................|..-......||/..........|./.......
                ............./.................\\..-....../........|........\\.|................\\...||......................\\...
                .\\....................\\..-....\\...........||.................-....\\.....-.............../.....\\.../......../..
                ........|..-....................-...../..................\\..-..-/.....|....\\...|.-............|..........\\....
                .................../......\\......................|.....././.............-.../.................\\...............
                .-..........\\........./....|...............-/..................-....|......-.........................|.......-
                -...............-....-........./.......\\....../............./.-..............\\.....\\........-........-..|-....
                ................................--./........|.../........-.....|../.......................\\....|.........|....
                .|.........................-/..........................................|........................../.....\\.../.
                ....-................................|......|......../|..|....../...-........./...../........./.......|./.....
                .........../\\.........../....../../.......\\........|/.........-/..\\/.................../......................
                .........\\................\\.............-.....-.......\\\\|..\\...\\......\\...............\\/.....||...............
                .\\.............|............../.........................\\.\\...|.................../.......................\\.|.
                ..................../.......|.............................\\.......-..........-......-............./....\\......
                ...................\\.|.....................-.....-/-............\\............../.............../.\\.\\..........
                .....-...................|........|..........\\...../.........................\\.........|.......\\...-..../.....
                ............................-...........\\./....|./................\\.............................-.....\\..../..
                .....\\\\|......-...\\......................................./.........................\\.../....\\....../.........
                ...................-.|..................-..-......-.|.....\\................/...................\\..............
                .|.........................\\........................|...................................\\.................\\...
                ......|-...-.....................................|...\\|...../............/.../.........|........\\.............
                \\........\\...............................\\..\\...|./............................-..-....-\\.....................
                ./............../......./.-.............\\.................\\.........|.\\....................../.............|.|
                ...........|......-.....-.....\\...|...................................\\..................................-....
                ................./................./...........|..../.............|..........\\................/...............
                .........\\./..\\..-......|........-.-.........-\\../................................-....\\.....|.........-......
                ....................\\.......-.....\\-/.\\.......................................\\............-...-..............
                ....................|..|/-....\\............/../.........\\..............|....\\....\\././....|...........\\.......
                ........../......-.../..\\...............|....................................../-......|..../...|..|\\.........
                .......\\........../...\\...................................-.........../.......................................
                ..|.............|............................/.......-.................\\.-.................\\...-......\\.\\.....
                .....//\\|...../\\..|..................|.............\\..-........./........../..................................
                .|..............-../..............|...........|..............|......\\...\\.|.......|........-..............|.\\.
                .|......./.........-|.......\\..-................../...\\..\\.....\\./...\\...............|..............\\-........
                ...............\\......-.......................\\................./..................................\\..........
                ......................................|/.|....................../........./......\\...........-......\\.\\.......
                ..................................../........\\....\\...........-\\..|........./..\\.........../.\\................
                ........\\......./.......|.........................../.................-....|........./........./..............
                ....|-...........|............-...........................................-.|-..\\............-..|.............
                ........./..\\.\\...............|..../....................\\..............-.../....../..........-.....\\.|........
                .............................-.....|........................|./........................\\./..\\........../\\.....
                ...|...........-........|...../..................|.././........../.............../....../..........-...../....
                ..-..........|....-.....|...../.././........|.|......................................./.-............|/.......
                /.-............................../........../......\\/...-.......\\.....\\.........\\./.........-.................
                .-.......|........-..........-...........|............................................/..........-.....-.....\\
                .-...../...............-........................................\\...\\.........-.........-.....\\..........\\....
                ......-...........\\./......\\../.............../........-...........|....|./...............................\\...
                ........................|/\\....../.....\\....|............................../......................./........-.
                ...../..........\\............./......\\....................|.........-|.................../.\\..................
                ...........\\.|...|..\\....-............|.|...........-........\\-................-.............|.-..............""";

        var map = Arrays.stream(input.split("\n")).map(String::toCharArray).toArray(char[][]::new);

        var maximumEnergy = 0;

        for(int row = 0; row < map.length; row++) {
            for(int col = 0; col < 2; col++) {
                var positionDirectionMap = new HashMap<Position, HashSet<Direction>>();
                var energized = new boolean[map.length][map[0].length];
                for(int i = 0; i < map.length; i++) {
                    energized[i] = new boolean[map[i].length];
                }

                var positionRow = row;
                var positionCol = col == 0 ? 0 : map[row].length - 1;
                var direction = col == 0 ? new Direction(0, 1) : new Direction(0, -1);

                try {
                    travel(positionDirectionMap, map, energized, positionRow, positionCol, direction);
                } catch (StackOverflowError e) {
                    System.out.println("Stack overflow");
                }

                var current = printAndCount(energized);

                if(current > maximumEnergy) {
                    maximumEnergy = current;
                }
            }
        }

        for(int col = 0; col < map.length; col++) {
            for(int row = 0; row < 2; row++) {
                var positionDirectionMap = new HashMap<Position, HashSet<Direction>>();
                var energized = new boolean[map.length][map[0].length];
                for(int i = 0; i < map.length; i++) {
                    energized[i] = new boolean[map[i].length];
                }

                var positionRow = row == 0 ? 0 : map.length - 1;
                var positionCol = col;
                var direction = row == 0 ? new Direction(1, 0) : new Direction(-1, 0);

                try {
                    travel(positionDirectionMap, map, energized, positionRow, positionCol, direction);
                } catch (StackOverflowError e) {
                    System.out.println("Stack overflow");
                }

                var current = printAndCount(energized);

                if(current > maximumEnergy) {
                    maximumEnergy = current;
                }
            }
        }

        System.out.println(maximumEnergy);
    }

    private static int printAndCount(boolean[][] energized) {
        var energizedCount = 0;
        for(int i = 0; i < energized.length; i++) {
            for(int j = 0; j < energized[i].length; j++) {
                if(energized[i][j]) {
                    energizedCount++;
                }
                System.out.print(energized[i][j] ? '#' : '.');
            }
            System.out.print("\n");
        }

        System.out.println(energizedCount);
        return energizedCount;
    }

    private static void travel(HashMap<Position, HashSet<Direction>> positionDirectionMap, char[][] map, boolean[][] energized, int positionRow, int positionCol, Direction direction) {
        if(positionRow < 0 || positionRow >= map.length || positionCol < 0 || positionCol >= map[positionRow].length) {
            return;
        }
        if(positionDirectionMap.containsKey(new Position(positionRow, positionCol))) {
            var directions = positionDirectionMap.get(new Position(positionRow, positionCol));

            if(directions.contains(direction)) {
                return;
            }

            directions.add(direction);
        } else {
            var dirs = new HashSet<Direction>();
            dirs.add(direction);
            positionDirectionMap.put(new Position(positionRow, positionCol), dirs);
        }


//        System.out.println(positionRow + " " + positionCol);
//        System.out.println(direction);
//        printAndCount(energized);

        energized[positionRow][positionCol] = true;

        if(map[positionRow][positionCol] == '.') {
            if(positionRow + direction.row < 0 || positionRow + direction.row >= map.length
                    || positionCol + direction.col < 0 || positionCol + direction.col >= map[positionRow].length) {
                return;
            }

            travel(positionDirectionMap, map, energized, positionRow + direction.row, positionCol + direction.col, direction);
            return;
        }

        if(map[positionRow][positionCol] == '/') {
            if(direction.row == 1) {
                travel(positionDirectionMap, map, energized, positionRow, positionCol - 1,
                        new Direction(0, -1)
                );
                return;
            }
            if(direction.row == -1) {
                travel(positionDirectionMap, map, energized, positionRow, positionCol + 1,
                        new Direction(0, 1)
                );
                return;
            }
            if(direction.col == 1) {
                travel(positionDirectionMap, map, energized, positionRow - 1, positionCol,
                        new Direction(-1, 0)
                );
                return;
            }
            if(direction.col == -1) {
                travel(positionDirectionMap, map, energized, positionRow + 1, positionCol,
                        new Direction(1, 0)
                );
                return;
            }
        }

        if(map[positionRow][positionCol] == '\\') {
            if(direction.row == 1) {
                travel(positionDirectionMap, map, energized, positionRow, positionCol + 1,
                        new Direction(0, 1)
                );
                return;
            }
            if(direction.row == -1) {
                travel(positionDirectionMap, map, energized, positionRow, positionCol - 1,
                        new Direction(0, -1)
                );
                return;
            }
            if(direction.col == 1) {
                travel(positionDirectionMap, map, energized, positionRow + 1, positionCol,
                        new Direction(1, 0)
                );
                return;
            }
            if(direction.col == -1) {
                travel(positionDirectionMap, map, energized, positionRow - 1, positionCol,
                        new Direction(-1, 0)
                );
                return;
            }
        }

        if(map[positionRow][positionCol] == '|') {
            if(direction.col == 1 || direction.col == -1) {
                travel(positionDirectionMap, map, energized, positionRow + 1, positionCol,
                        new Direction(1, 0)
                );
                travel(positionDirectionMap, map, energized, positionRow - 1, positionCol,
                        new Direction(-1, 0)
                );
                return;
            }

            travel(positionDirectionMap, map, energized, positionRow + direction.row, positionCol + direction.col, direction);
            return;
        }

        if(map[positionRow][positionCol] == '-') {
            if(direction.row == 1 || direction.row == -1) {
                travel(positionDirectionMap, map, energized, positionRow, positionCol + 1,
                        new Direction(0, 1)
                );
                travel(positionDirectionMap, map, energized, positionRow, positionCol - 1,
                        new Direction(0, -1)
                );
                return;
            }

            travel(positionDirectionMap, map, energized, positionRow + direction.row, positionCol + direction.col, direction);
            return;
        }
    }
}
